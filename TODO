					  -*- indented-text -*-
-- 完了
* 間接リファレンス
* no method error 等例外処理
* block再実装
* 間接リファレンスの接続処理
* 簡易分散GC
* クライアント(異常)切断時の処理
* Session->ObjectSpace+Session分離
* DeepSpace#import/export
* IteratorCallBackRequest
* protorype宣言 (Marshal指定機能)
  + ブロック呼び出しの戻り値
* mspec.typeがいまいち
* method-specの継承の問題
  => class-spec-space
* VALクラスの拡張
* Object#deep_connect_dup
* Object#deep_connect_deep_copy
* ブロック引数の問題 arity を使えばどうにかなる?
* 相手の切断時のsessionの処理
* KeepAlive: 相手が生きているかを定期的に確認
* 簡易分散GCのパフォーマンスアップ(バッチ化)
* future type
* shallow-connect
* パフォーマンスアップ
  + プロトコル変更(PaketIdを使用しなくした)
  + Event#results の仕様変更/QueueからConditionVariableへ
  + Port#readでエラーチェックを少なくした.
  + ClassSpecSpace#mspecのキャッシュのキーを変更
* イテレータ中でスレッドを実行しなかでyieldされるとNG
* パフォーマンスアップ
  + eventのargs周りの*argsの変更

-- スケジュール
* 例外が消えることがある...
  + 再現待ち
--- 識別

* shallow-connect 追加
  + class一括指定
  + session個別指定(connect時コールバック)

* パフォーマンスアップ
  + ClassSpecの実クラス化

* DISPLAY_* 関連をまとめる

* 疑似immutableクラス
  + 変更時にコールバックする

* ACL

* メソッドスペック
  + instance_eval
  + module_eval

* リモートクラスクラスオブジェクト
  + リモートスーパークラス
    class Foo < RemoteSuperClass
	...
    end
